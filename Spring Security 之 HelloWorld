1.使用chrome浏览器访问了spring.io，在projects列表中找到了Spring Security，然后进入到Reference文档中浏览了一下，接着就用chrome另存了一份在本地。

2.打开本地的Spring Security Reference.pdf，然后浏览到2.4.2 Gradle章节，拿到Spring Security相关依赖。

3.继续浏览到4. Samples and Guides (Start Here)，文章指示从此处开始是一些代码实例，于是通过链接跳到github中，将相关的例子都用zip的方式一次性下载到本地。

4.开始看第一个例子/home/kouzikaile/workspace/mygit/spring-security-5.0.4.RELEASE/samples/javaconfig/helloworld
I.spring-security-samples-javaconfig-helloworld.gradle

apply plugin: 'io.spring.convention.spring-sample-war' // 这里的插件没见过，因为刚学gradle不久

dependencies {
    compile project(':spring-security-config')// 这种表达也不太清楚是在做什么
    compile project(':spring-security-web') // 同上，感觉这里是要编译其它项目作为spring security的依赖，不是很确定
    compile jstlDependencies // 这里好像在说编译jstl的依赖，但问题是这个依赖在哪儿定义过？
    compile slf4jDependencies// 同上，要用slfj4以来

    providedCompile 'javax.servlet:javax.servlet-api' // 这里是servlet的api
    providedCompile 'javax.servlet.jsp:javax.servlet.jsp-api' // 同上，但貌似这个写法有版本问题

    integrationTestCompile seleniumDependencies // 没看懂
}

II.创建gradle的web项目（用的gradle4.6），上面不太清楚的地方毫无悬念的都报错，所以自己写了个能编译过去的

build.gradle
------------------------------
group 'com.laowuandhisfriends' // group id
version '1.0' // 版本

apply plugin: 'java' // java插件
apply plugin: 'war' // 打包为war

sourceCompatibility = 1.8 // 源码编码格式
targetCompatibility = 1.8 // 编译的class编码格式

repositories {
    mavenCentral() // 配置maven中央库，这里因为在国内，所以在一开始就配置了aliyun的maven镜像仓库，放到了gradle安装目录
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11' // 自动添加的依赖，单元测试框架，放着先
    testCompile group: 'junit', name: 'junit', version: '4.12' // 同上，不过这个版本主要是为了让Spring容器能整合单元测试

    providedCompile 'javax.servlet:javax.servlet-api:3.1.0' // I中的此处没写版本号，我用maven repository提供的地址才可以

    compile 'org.springframework:spring-webmvc:5.0.4.RELEASE' // security-config需要依赖webmvc
    compile 'org.springframework.security:spring-security-web:5.0.4.RELEASE' // spring security核心依赖
    compile 'org.springframework.security:spring-security-config:5.0.4.RELEASE' // 同上
}
------------------------------

III.加入源码，注解没报错，简单认为上述配置应该没太大问题（有点慌）
SecurityConfig.java
------------------------------
@EnableWebSecurity
public class SecurityConfig {

    // @formatter:off
    @Bean
    public UserDetailsService userDetailsService() throws Exception {
        UserDetails user = User.withUsername("user").password("password").roles("USER").build();
        return new InMemoryUserDetailsManager(user);
    }
    // @formatter:on
}

++++++++++++++++++++++++++++
跟进@EnableWebSecurity注解：
@Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
@Target(value = { java.lang.annotation.ElementType.TYPE })
@Documented
@Import({ WebSecurityConfiguration.class,
        SpringWebMvcImportSelector.class }) // 导入两个@Configuration注解的类的class对象
@EnableGlobalAuthentication
@Configuration
public @interface EnableWebSecurity {

    /**
     * Controls debugging support for Spring Security. Default is false.
     * @return if true, enables debug support with Spring Security
     */
    boolean debug() default false;
}
++++++++++++++++++++++++++++
跟进@EnableGlobalAuthentication注解：
@Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
@Target(value = { java.lang.annotation.ElementType.TYPE })
@Documented
@Import(AuthenticationConfiguration.class)
@Configuration // 这里也是用的配置注解，这个注解应该也可以标注一个配置类，不过从名称上能看出，是一个允许全局认证的配置
public @interface EnableGlobalAuthentication {}

javadoc：该注解示意被注解的类可以被用来配置一个全局的AuthenticationManagerBuilder类的实例。跟进AuthenticationManagerBuilder，它有个AuthenticatioinManager类型的属性parentAuthenticationManager，在parentAuthenticationManager方法中被初始化。这个类说是使用SecurityBuilder创建一个AuthenticatioinManager（认证管理器）实例。允许轻松构建内存认证，LDAP认证和基于JDBC的认证；允许添加UserDetialsService和AuthenticationProvider所拥有的组件，不明觉厉啊！！！

回头再看：@EnableGlobalAuthentication主要就是为了创建全局的AuthenticatioinManager（认证管理器）实例。
++++++++++++++++++++++++++++
跟进WebSecurityConfiguration类：
@Configuration
public class WebSecurityConfiguration implements ImportAware, BeanClassLoaderAware {}

javadoc：使用WebSecurity创建FilterChainProxy，FilterChainProxy替Spring Security执行基于安全的网页服务，然后输出必要的beans。可以通过继承WebSecurityConfigurerAdapter并暴露WebSecurity作为一个Configuration的方式自定义WebSecurity，也可以通过实现WebSecurityConfigurer并暴露WebSecurity作为一个Configuration的方式自定义WebSecurity。当使用EnableWebSecurity时会导入这个配置（应该是WebSecurity）。
++++++++++++++++++++++++++++
跟进SpringWebMvcImportSelector类：
class SpringWebMvcImportSelector implements ImportSelector {}

javadoc：当DispatcherServlet在classpath中，EnableWebSecurity使用SpringWebMvcImportSelector有条件地导入WebMvcSecurityConfiguration。
++++++++++++++++++++++++++++

跟进WebMvcSecurityConfiguration类：
class WebMvcSecurityConfiguration implements WebMvcConfigurer, ApplicationContextAware {}

javadoc：用于为Spring MVC和Spring Security CSRF整合增加一个RequestDataValueProcessor处理器。当SpringWebMvcImportSelector添加了EnableWebMvc并且DispatcherServlet位于classpath中的时候，这个配置会被添加进来。这时还会添加AuthenticationPrincipalArgumentResolver作为HandlerMethodArgumentResolver。

这里停下来了，涉及到源码越来越多，不好一次性分析出来，暂停，先进行下一步。

小结：当使用@EnableWebSecurity注解了一个类，这个类会成为配置类，底层会帮助我们创建认证管理器，认证分解器以及请求数据值的处理器。
++++++++++++++++++++++++++++
------------------------------
IV.回过头来继续分析SecurityConfig类
------------------------------
@Bean
public UserDetailsService userDetailsService() throws Exception {
    UserDetails user = User.withUsername("user").password("password").roles("USER").build();
        return new InMemoryUserDetailsManager(user);
}
通过工厂方法装配Bean——InMemoryUserDetailsManager实例。
++++++++++++++++++++++++++++
跟进InMemoryUserDetailsManager类：

javadoc：UserDetailsManager的非持久实现，由内存映射支持。主要用于测试和演示，对于一个完整的持久性项目不是必须的。UserDetailsManager维护了一个HashMap<String,MutableUserDetails>，键是用户名的小写，值是MutableUser实例，该实例中维护了一个密码和一个UserDetails实例，这个password恰好就是UserDetails实例的password。
++++++++++++++++++++++++++++
跟进UserDetails接口：

javadoc：提供核心用户信息。它的实现不是直接被Spring Security用于安全目的。它们简单地存储用户信息，这些信息稍后会被封装到Authentication对象中。这就允许非安全相关的用户信息，比如电子邮件地址、电话号码等被保存在一个便利的地方。UserDetails接口的具体实现必须非常小心，确保非空契约强制执行每种方法的详细信息。User类作为一个引用实现，你可以继承它或者直接在代码中使用它。
++++++++++++++++++++++++++++
跟进User类：

public class User implements UserDetails, CredentialsContainer {}

javadoc：建立通过UserDetailsService接收的核心用户信息模型。开发者会直接使用这个类，继承它，或者通过简易编程，编写他们自己的UserDetails实现。equals和hashcode方法仅仅是基于username属性实现的，旨在搜索与用户名相同的用户主体对象，而不是所有属性匹配下的用户对象。值得注意的是，这个实现不是一成不变的。它实现了CredentialsContainer接口，为了允许在认证后擦除密码。如果你正在存储实例到内存映射并重复使它们，这会产生负面影响。如果真的是这样，请确保每次调用都返回你的UserDetailsService的一个副本。
++++++++++++++++++++++++++++
跟进UserDetailsManager接口：

javadoc：UserDetailsService接口的扩展，提供创建新用户和更新已有用户的能力。
++++++++++++++++++++++++++++
跟进UserDetailsService接口：

UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;

javadoc：加载用户指定数据的核心接口，始终被框架用作用户DAO，也是DaoAuthenticationProvider使用的策略。该接口要求有且仅有一个只读方法loadUserByUsername，它简化了对新的数据访问策略的支持。loadUserByUsername方法通过姓名定位用户。在实际的实现中，搜索也许大小写敏感，也许大小写不敏感，这取决于实现的实例被如何配置。也就是说，返回的UserDetails对象可能拥有一个用户名，与实际请求的用户名大小写不一致。
++++++++++++++++++++++++++++
跟进DaoAuthenticationProvider类：

javadoc：它继承AbstractUserDetailsAuthenticationProvider抽象类，从一个UserDetailsService中接收用户的详细信息。
++++++++++++++++++++++++++++
跟进AbstractUserDetailsAuthenticationProvider类：

javadoc：它实现AuthenticationProvider接口，允许子类重写并与UserDetails对象合作。这个类被设计用来响应UsernamePasswordAuthenticationToken认证的请求。如果成功验证，UsernamePasswordAuthenticationToken会被创建并返回给它的调用者。这个令牌的主体内容是代表username的字符串或者从认证仓库返回的UserDetails。如果使用容器适配器，它期望代表username的字符串，推荐使用这个字符串作为令牌。如果被认证的用户要求访问额外的属性，比如电子邮件地址，人性化的名字等，推荐使用UserDetails作为令牌。由于不推荐使用容器适配器，而且UserDetails实现提供额外的灵活性，所以默认情况下一个UserDetails会被返回。如果要覆盖这个默认设置，请将setForcePrincipalAsString设置为true。通过存储放置在UserCache中的UserDetails对象来处理缓存。这确保了随后使用相同username的请求能被验证，而无需再次请求UserDetailsService。注意，如果一个用户呈现了一个错误的password，UserDetailsService会被查询来确认最新的password被用于比较。缓存仅仅可能被无状态的应用要求使用。在一个普通的应用中，比如SecurityContext被存储到用户的session中，这个用户不会在每个请求中重复认证。默认的缓存实现是NullUserCache。

小结：SecurityConfig配置工厂方法来创建UserDetailsService类型的InMemoryUserDetailsManager实例（内存中的用户详情管理器），它封装了一个UserDetails实例（用户详情），这个UserDetails至少应该包含username（用户名）、password（密码）和authorities（若干权限）三个部分。
------------------------------
SecurityWebApplicationInitializer.java
------------------------------
public class SecurityWebApplicationInitializer extends
        AbstractSecurityWebApplicationInitializer {

    public SecurityWebApplicationInitializer() {
        super(SecurityConfig.class);
    }
}
++++++++++++++++++++++++++++
跟进AbstractSecurityWebApplicationInitializer抽象类：

javadoc：注册DelegatingFilterProxy来使用springSecurityFilterChain，在其它任一Filter被注册之前。当与AbstractSecurityWebApplicationInitializer(Class...)构造器一起被使用时，它也会注册一个ContextLoaderListener。当与AbstractSecurityWebApplicationInitializer()构造器一起被使用时，这个类常被用在除了AbstractContextLoaderInitializer子类的其它类中。默认情况下不支持注册DelegatingFilterProxy，但是可以通过重写isAsyncSecuritySupported()和getSecurityDispatcherTypes()获得支持。通过重写afterSpringSecurityFilterChain(ServletContext)可以在springSecurityFilterChain前后添加额外的配置。AbstractDispatcherServletInitializer的子类将在其它Filter之前注册它们自己的过滤器。这就意味着，你应该要确保AbstractDispatcherServletInitializer子类优先被调用。可以通过确保AbstractDispatcherServletInitializer的顺序或者Ordered比子类AbstractSecurityWebApplicationInitializer更快来实现这一点。SecurityWebApplicationInitializer()实际上调用了父类AbstractSecurityWebApplicationInitializer(Class<?>... configurationClasses)，这个构造器创建一个实例来初始化ContextLoaderListener中指定的配置类（SecurityConfig.class）。

至此，HelloWorld中简单的Java配置基本分析完毕。实际上，这里只发生了两件事情，一是在SecurityConfig中配置一个用户信息，包括username、password和authorities信息，然后交给UserDetails管理器；二是在SecurityWebApplicationInitializer中利用ContextLoaderListener将信息初始化到Spring上下文中。

这其中有一个非常重要的接口：WebApplicationInitializer，由于传统的基于web.xml的方式不被推荐，它在Servlet 3.0+ 环境中被实现，旨在通过编程的方式配置ServletContext上下文。该接口的详细内容，我将放到后面再分析。
------------------------------
index.jsp
------------------------------
<%@ page contentType="text/html; charset=UTF-8" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<html lang="en">
<head>
    <title>Hello Security</title>
    <c:url var="faviconUrl" value="/resources/img/favicon.ico"/>
    <link rel="icon" type="image/x-icon" href="${faviconUrl}"/>
    <c:url var="bootstrapUrl" value="/resources/css/bootstrap.css"/>
    <link href="${bootstrapUrl}" rel="stylesheet"></link>
    <c:url var="bootstrapResponsiveUrl" value="/resources/css/bootstrap-responsive.css"/>
    <link href="${bootstrapResponsiveUrl}" rel="stylesheet"></link>
    <!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
    <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
</head>

<body>
<div class="container">
    <h1>This is secured!</h1>
    <p>
        Hello <b><c:out value="${pageContext.request.remoteUser}"/></b>
    </p>
    <c:url var="logoutUrl" value="/logout"/>
    <form class="form-inline" action="${logoutUrl}" method="post">
        <input type="submit" value="Log out"/>
        <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>
    </form>
</div>
</body>
</html>

这里用到了http://java.sun.com/jsp/jstl/core，我们需要在build.gradle中添加jstl依赖。Samples中使用了<jsp:root>元素，没有用过，所以替换成了传统的jsp页面。

部署项目到tomcat服务器，启动服务器访问http://localhost:8080/security，页面跳转到了/security/login，这个页面我并没有编写，简单认为，应该是Spring Security为我们生成的。
------------------------------
<html>
<head>
    <title>Login Page</title>
</head>
<body onload='document.f.username.focus();'>
    <h3>Login with Username and Password</h3>
    <form name='f' action='/security/login' method='POST'>
        <table>
            <tr><td>User:</td><td><input type='text' name='username' value=''></td></tr>
            <tr><td>Password:</td><td><input type='password' name='password'/></td></tr>
            <tr><td colspan='2'><input name="submit" type="submit" value="Login"/></td></tr>
            <input name="_csrf" type="hidden" value="cf5ce79a-ec8a-44bd-b030-2369db4a2dde" />
        </table>
    </form>
</body>
</html>

这个页面并没有什么特殊的地方，但是有一个name为_csrf，value为cf5ce79a-ec8a-44bd-b030-2369db4a2dde的隐藏input元素，然后在index.jsp页面中也同样找到了_csrf参数，关键在于弄清楚这个value具体的含义。我随便在username和password上输入两个数字，点击登录，页面跳转到/security/login?error，在页面上方错误提示Your login attempt was not successful, try again.以及Reason: 坏的凭证。错误提示的中点落在Reason上面，这个坏的凭证应该就是value的含义，可以这么想，登录表单携带value这个凭证和用户名、密码请求/security/login，凭证验证失败，重定向到了login页面，并同时显示这些错误信息。隐藏域的name是_csrf，这不就是CSRF（跨站请求伪造）。

到目前为止，并未真正访问到我所编写的部分，也就是说，spring security在上下文中处理一些事情。我试图找到这些处理的所在地。

突然想起，我在SecurityConfig中配置的用户信息为：{username:'user',password:'password',role:'USER'}，猜想，在进行登录的过程中，提交的用户名就与UserDetails中的用户信息进行匹配，发现匹配不上，所以返回login页面，提示凭证错误。于是，我尝试在login页面填写了user和password，然后点击登录，得到如下异常提示：HTTP Status 500 - There is no PasswordEncoder mapped for the id "null"。虽然出现了500错误，但也算是有了进展，因为刚才的猜想应该是正确的。

于是，问题又来到了HTTP Status 500 - There is no PasswordEncoder mapped for the id "null"，错误意思是说没有PasswordEncoder映射到null的id。不是很明白，感觉就是少了密码编码这一个环节。于是开始寻求源码解释。
++++++++++++++++++++++++++++
跟进PasswordEncoder接口：
public interface PasswordEncoder {

	String encode(CharSequence rawPassword);

	boolean matches(CharSequence rawPassword, String encodedPassword);

}

javadoc：密码编码的服务接口。首选的实现是BCryptPasswordEncoder。方法encode，编码原生密码。通常，一个好的编码算法应用了SHA-1或者结合8个字节的更大的hash数或者随机生成更复杂的编码。方法matches，验证从存储中获得的编码密码与提交的原始数据也被编码后的密码相匹配。如果两个编码密码匹配上就返回true，否则返回false。存储的密码永远不会被解码。
++++++++++++++++++++++++++++
跟进BCryptPasswordEncoder类：

javadoc：PasswordEncoder实现，使用BCrypt强大的hash函数。客户端可以选择性提供一个强度和一个SecureRandom实例。越大的强度参数，更多的工作被做来hash编码密码。默认情况下强度数字为10。

从这里得到一个结论，login页面提交的password会先被BCryptPasswordEncoder编码，形成编码密码，然后再与UserDetails中的编码密码进行匹配，那么就需要我在设置SecurityConfig中配置user用户的时候密码也要设置成编码密码，于是找到了https://www.dailycred.com/article/bcrypt-calculator网站，专门用来将原生字符串按照一定的强度转换成编码密码，遂修改SecurityConfig的password方法：password("$2a$08$mKNjRlyX9aZzelEqinZWcO54ot3x1P6Dz6Yy/ZMExaupzUlVoz1DG")。但是上述错误仍然存在，于是根据异常提示，跟踪到异常跑出的类DelegatingPasswordEncoder。
++++++++++++++++++++++++++++
跟进DelegatingPasswordEncoder类：

javadoc：实现PasswordEncoder，一个密码编码器，它基于一个前缀标识符将密码编码工作代理到另一个PasswordEncoder。你可以使用PasswordEncoderFactories轻松地构建一个密码编码器实例。
++++++++++++++++++++++++++++
跟进PasswordEncoderFactories类：
public class PasswordEncoderFactories {

	public static PasswordEncoder createDelegatingPasswordEncoder() {
		String encodingId = "bcrypt";
		Map<String, PasswordEncoder> encoders = new HashMap<>();
		encoders.put(encodingId, new BCryptPasswordEncoder());
		encoders.put("ldap", new LdapShaPasswordEncoder());
		encoders.put("MD4", new Md4PasswordEncoder());
		encoders.put("MD5", new MessageDigestPasswordEncoder("MD5"));
		encoders.put("noop", NoOpPasswordEncoder.getInstance());
		encoders.put("pbkdf2", new Pbkdf2PasswordEncoder());
		encoders.put("scrypt", new SCryptPasswordEncoder());
		encoders.put("SHA-1", new MessageDigestPasswordEncoder("SHA-1"));
		encoders.put("SHA-256", new MessageDigestPasswordEncoder("SHA-256"));
		encoders.put("sha256", new StandardPasswordEncoder());

		return new DelegatingPasswordEncoder(encodingId, encoders);
	}

	private PasswordEncoderFactories() {}
}

javadoc：这个工厂类专门用来创建一个密码编码器实例。createDelegatingPasswordEncoder方法，会使用默认的映射来创建一个DelegatingPasswordEncoder实例。观察到encoders这个默认的映射是一个代表算法的字符串和一个基于这个算法的密码编码器的键值映射。而DelegatingPasswordEncoder实例则是通过encodingId, encoders两个参数创建的。回到DelegatingPasswordEncoder。

++++++++++++++++++++++++++++
跟进DelegatingPasswordEncoder类：

javadoc：换句话说，你可以利用类似于工厂的方式，创建自己习惯使用的密码编码器。通常一个密码的存储格式为'{id}encodedPassword'，看到这里，我发现那个异常提示应该是因为没有在编码后的密码字符串前面指定{id}，这个id用来查找指定的PasswordEncoder，encodedPassword就是根据id指定的算法编码后的密码编码。如果id没有指定，就会被认为是null。终于，异常找到，于是，我在密码编码前加上{bcrypt}，User.withUsername("user").password("{bcrypt}$2a$08$mKNjRlyX9aZzelEqinZWcO54ot3x1P6Dz6Yy/ZMExaupzUlVoz1DG").roles("USER").build()。启动服务器，login页面，输入user和password，页面跳转到http://localhost:8080/security/，404找不到这个地址。

由于一直解决不了org.openqa.selenium依赖的问题，无法利用junit进行测试，暂停helloworld示例分析，转向hellomvc示例。
------------------------------

















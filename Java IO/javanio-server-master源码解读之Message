javanio-server-master源码解读之Message

public class Message {

    /*消息缓冲区*/
    private MessageBuffer messageBuffer = null;
    /*socketId*/
    public long socketId = 0; // the id of source socket or destination socket, depending on whether is going in or out.
    /*共享数组*/
    public byte[] sharedArray = null;
    /*数组偏移量*/
    public int    offset      = 0; //offset into sharedArray where this message data starts.
    /*数组容量*/
    public int    capacity    = 0; //the size of the section in the sharedArray allocated to this message.
    /*分区长度*/
    public int    length      = 0; //the number of bytes used of the allocated section.
    /*元数据*/
    public Object metaData    = null;
    /*初始化Message，利用消息缓冲区*/
    public Message(MessageBuffer messageBuffer) {
        this.messageBuffer = messageBuffer;
    }

    /**
     * Writes data from the ByteBuffer into this message - meaning into the buffer backing this message.
     *
     * @param byteBuffer The ByteBuffer containing the message data to write.
     * @return
     */
    public int writeToMessage(ByteBuffer byteBuffer){
        /*获取缓冲区剩余的字节数*/
        int remaining = byteBuffer.remaining();
        /*如果缓冲区字节数与分区长度的和比容量大*/
        while(this.length + remaining > capacity){
            /*扩展消息分区*/
            if(!this.messageBuffer.expandMessage(this)) {
                return -1;
            }
        }
        /*找出用于拷贝的字节数*/
        int bytesToCopy = Math.min(remaining, this.capacity - this.length);
        /*从缓冲区中拷贝指定长度的元素到共享数组*/
        byteBuffer.get(this.sharedArray, this.offset + this.length, bytesToCopy);
        /*增加拷贝长度到分区长度*/
        this.length += bytesToCopy;
        /*返回拷贝长度*/
        return bytesToCopy;
    }




    /**
     * Writes data from the byte array into this message - meaning into the buffer backing this message.
     *
     * @param byteArray The byte array containing the message data to write.
     * @return
     */
    public int writeToMessage(byte[] byteArray){
        /*将字节数组的元素写到消息中*/
        return writeToMessage(byteArray, 0, byteArray.length);
    }


    /**
     * Writes data from the byte array into this message - meaning into the buffer backing this message.
     *
     * @param byteArray The byte array containing the message data to write.
     * @return
     */
    public int writeToMessage(byte[] byteArray, int offset, int length){
        /*将剩余字节置为拷贝长度*/
        int remaining = length;
        /*如果分区长度与拷贝长度的和大于容量*/
        while(this.length + remaining > capacity){
            /*扩展消息分区*/
            if(!this.messageBuffer.expandMessage(this)) {
                return -1;
            }
        }
        /*获得拷贝长度*/
        int bytesToCopy = Math.min(remaining, this.capacity - this.length);
        /*拷贝字节数组到共享数组*/
        System.arraycopy(byteArray, offset, this.sharedArray, this.offset + this.length, bytesToCopy);
        /*将拷贝长度加到分区长度*/
        this.length += bytesToCopy;
        /*返回拷贝长度*/
        return bytesToCopy;
    }




    /**
     * In case the buffer backing the nextMessage contains more than one HTTP message, move all data after the first
     * message to a new Message object.
     *
     * @param message   The message containing the partial message (after the first message).
     * @param endIndex  The end index of the first message in the buffer of the message given as parameter.
     */
    public void writePartialMessageToMessage(Message message, int endIndex){
        /*部分消息的起始位置*/
        int startIndexOfPartialMessage = message.offset + endIndex;
        /*部分消息的长度*/
        int lengthOfPartialMessage     = (message.offset + message.length) - endIndex;
        /*将指定消息的共享数组拷贝到当前共享数组*/
        System.arraycopy(message.sharedArray, startIndexOfPartialMessage, this.sharedArray, this.offset, lengthOfPartialMessage);
    }
    /**/
    public int writeToByteBuffer(ByteBuffer byteBuffer){
        return 0;
    }
}
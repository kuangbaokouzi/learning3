javanio-server-master源码解读之SocketProcessor

public class SocketProcessor implements Runnable {

    /*入站socket队列*/
    private Queue<Socket>  inboundSocketQueue   = null;
    /*读消息缓冲区*/
    private MessageBuffer  readMessageBuffer    = null; //todo   Not used now - but perhaps will be later - to check for space in the buffer before reading from sockets
    /*写消息缓冲区*/
    private MessageBuffer  writeMessageBuffer   = null; //todo   Not used now - but perhaps will be later - to check for space in the buffer before reading from sockets (space for more to write?)
    /*消息阅读器工厂*/
    private IMessageReaderFactory messageReaderFactory = null;
    /*出站socket队列*/
    private Queue<Message> outboundMessageQueue = new LinkedList<>(); //todo use a better / faster queue.
    /*socket映射*/
    private Map<Long, Socket> socketMap         = new HashMap<>();
    /*读消息字节缓冲区，大小1024*1024*/
    private ByteBuffer readByteBuffer  = ByteBuffer.allocate(1024 * 1024);
    /*写消息字节缓冲区，大小1024*1024*/
    private ByteBuffer writeByteBuffer = ByteBuffer.allocate(1024 * 1024);
    /*读选择器*/
    private Selector   readSelector    = null;
    /*写选择器*/
    private Selector   writeSelector   = null;
    /*消息处理器*/
    private IMessageProcessor messageProcessor = null;
    /*写代理*/
    private WriteProxy        writeProxy       = null;
    /*socketId，从16K开始计数*/
    private long              nextSocketId = 16 * 1024; //start incoming socket ids from 16K - reserve bottom ids for pre-defined sockets (servers).
    /*空到非空socket集合*/
    private Set<Socket> emptyToNonEmptySockets = new HashSet<>();
    /*非空到空socket集合*/
    private Set<Socket> nonEmptyToEmptySockets = new HashSet<>();

    /*初始化socket处理器，根据入站socket队列、消息读写缓冲区、消息阅读器工厂和消息处理器*/
    public SocketProcessor(Queue<Socket> inboundSocketQueue, MessageBuffer readMessageBuffer, MessageBuffer writeMessageBuffer, IMessageReaderFactory messageReaderFactory, IMessageProcessor messageProcessor) throws IOException {
        this.inboundSocketQueue = inboundSocketQueue;

        this.readMessageBuffer    = readMessageBuffer;
        this.writeMessageBuffer   = writeMessageBuffer;
        /*初始化写代理，根据写消息缓冲区和出站消息队列*/
        this.writeProxy           = new WriteProxy(writeMessageBuffer, this.outboundMessageQueue);

        this.messageReaderFactory = messageReaderFactory;

        this.messageProcessor     = messageProcessor;

        this.readSelector         = Selector.open();
        this.writeSelector        = Selector.open();
    }

    /*线程方法*/
    public void run() {
        while(true){
            try{
                /*执行循环*/
                executeCycle();
            } catch(IOException e){
                e.printStackTrace();
            }

            try {
                /*每次执行完，当前线程休眠0.1秒*/
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }


    public void executeCycle() throws IOException {
        /*获取新的socket*/
        takeNewSockets();
        /*从socket集合中读消息*/
        readFromSockets();
        /*将消息写到socket集合中*/
        writeToSockets();
    }


    public void takeNewSockets() throws IOException {
        /*从入站socket队列中出队一个socket*/
        Socket newSocket = this.inboundSocketQueue.poll();
        /*如果出队的socket不为空*/
        while(newSocket != null){
            /*socketId自增并赋值给该socket*/
            newSocket.socketId = this.nextSocketId++;
            /*调用该socket对应的socket通道设置通道为非阻塞模式*/
            newSocket.socketChannel.configureBlocking(false);
            /*利用消息阅读器工厂创建一个消息阅读器*/
            newSocket.messageReader = this.messageReaderFactory.createMessageReader();
            /*初始化消息阅读器，根据读消息缓冲区*/
            newSocket.messageReader.init(this.readMessageBuffer);
            /*创建并初始化消息编写器*/
            newSocket.messageWriter = new MessageWriter();
            /*建立socketId和当前socket的映射*/
            this.socketMap.put(newSocket.socketId, newSocket);
            /*注册当前socket通道到指定的选择器上，并指定读事件*/
            SelectionKey key = newSocket.socketChannel.register(this.readSelector, SelectionKey.OP_READ);
            /*将当前socket附加到SelectionKey上*/
            key.attach(newSocket);
            /*接着入站队列出队操作*/
            newSocket = this.inboundSocketQueue.poll();
        }
    }


    public void readFromSockets() throws IOException {
        /*选取I/O操作准备就绪通道对应key集合*/
        int readReady = this.readSelector.selectNow();
        /*如果集合不为空*/
        if(readReady > 0){
            /*选取选择器的selected-key集合*/
            Set<SelectionKey> selectedKeys = this.readSelector.selectedKeys();
            Iterator<SelectionKey> keyIterator = selectedKeys.iterator();
            /*利用迭代器便利了SelectionKey集合*/
            while(keyIterator.hasNext()) {
                SelectionKey key = keyIterator.next();
                /*将SelectionKey中的Socket信息读取到读取字节缓冲区中*/
                readFromSocket(key);
                /*每次处理完读取操作，将SelectionKey从当前迭代器中移除*/
                keyIterator.remove();
            }
            /*当所有的SelectionKey已经处理完毕，清空集合*/
            selectedKeys.clear();
        }
    }

    private void readFromSocket(SelectionKey key) throws IOException {
        /*获得SelectionKey中附着的Socket对象*/
        Socket socket = (Socket) key.attachment();
        /*将Socket对象中的消息读取到读取字节缓冲区中*/
        socket.messageReader.read(socket, this.readByteBuffer);
        /*获得完整消息列表*/
        List<Message> fullMessages = socket.messageReader.getMessages();
        /*如果消息列表不为空*/
        if(fullMessages.size() > 0){
            /*遍历消息列表*/
            for(Message message : fullMessages){
                message.socketId = socket.socketId;
                /*执行处理器处理每条消息：将消息逐条添加到写出消息队列中*/
                this.messageProcessor.process(message, this.writeProxy);  //the message processor will eventually push outgoing messages into an IMessageWriter for this socket.
            }
            /*清空消息列表*/
            fullMessages.clear();
        }
        /*如果读取操作结束*/
        if(socket.endOfStreamReached){
            System.out.println("Socket closed: " + socket.socketId);
            /*从映射中移除当前socket实例*/
            this.socketMap.remove(socket.socketId);
            /*SelectionKey的附着对象置空*/
            key.attach(null);
            /*SelectionKey取消*/
            key.cancel();
            /*SelectionKey对应的通道关闭*/
            key.channel().close();
        }
    }


    public void writeToSockets() throws IOException {

        // Take all new messages from outboundMessageQueue
        /*获取出站消息*/
        takeNewOutboundMessages();

        // Cancel all sockets which have no more data to write.
        /*清空没有消息可写的socket集合*/
        cancelEmptySockets();

        // Register all sockets that *have* data and which are not yet registered.
        /*注册所有有数据但没注册的socket*/
        registerNonEmptySockets();

        // Select from the Selector.
        /*选取I/O操作准备就绪通道对应key集合*/
        int writeReady = this.writeSelector.selectNow();
        /*如果key集合不为空*/
        if(writeReady > 0){
            /*获取selected-key集合*/
            Set<SelectionKey>      selectionKeys = this.writeSelector.selectedKeys();
            Iterator<SelectionKey> keyIterator   = selectionKeys.iterator();
            /*利用迭代器遍历selected-key集合*/
            while(keyIterator.hasNext()){
                SelectionKey key = keyIterator.next();
                /*获得当前SelectionKey附着的Socket对象*/
                Socket socket = (Socket) key.attachment();
                /*将socket中的消息写入到写字节缓冲区中*/
                socket.messageWriter.write(socket, this.writeByteBuffer);
                /*如果消息写入器中的消息队列为空*/
                if(socket.messageWriter.isEmpty()){
                    /*将socket对象添加到非空到空的socket集合*/
                    this.nonEmptyToEmptySockets.add(socket);
                }
                /*移除当前SelectionKey*/
                keyIterator.remove();
            }
            /*清空SelectionKey集合*/
            selectionKeys.clear();

        }
    }

    private void registerNonEmptySockets() throws ClosedChannelException {
        /*遍历空到非空集合*/
        for(Socket socket : emptyToNonEmptySockets){
            /*将socket对一个的通道注册到writeSelector上，将兴趣事件置为写状态，并将当前socket设定为附着对象*/
            socket.socketChannel.register(this.writeSelector, SelectionKey.OP_WRITE, socket);
        }
        /*清空空到非空socket集合*/
        emptyToNonEmptySockets.clear();
    }

    private void cancelEmptySockets() {
        /*遍历非空到空socket集合*/
        for(Socket socket : nonEmptyToEmptySockets){
            /*获取当前socket通道对应的SelectionKey*/
            SelectionKey key = socket.socketChannel.keyFor(this.writeSelector);
            /*取消当前SelectionKey*/
            key.cancel();
        }
        /*清空非空到空socket集合*/
        nonEmptyToEmptySockets.clear();
    }

    private void takeNewOutboundMessages() {
        /*出站消息队列出队消息*/
        Message outMessage = this.outboundMessageQueue.poll();
        /*如果消息不为空*/
        while(outMessage != null){
            /*从socket映射中取出当前出队消息对应的socket实例*/
            Socket socket = this.socketMap.get(outMessage.socketId);
            /*如果socket实例不为空*/
            if(socket != null){
                /*获得当前socket对象消息写入器*/
                MessageWriter messageWriter = socket.messageWriter;
                /*如果当前socket对象消息写入器的消息队列为空*/
                if(messageWriter.isEmpty()){
                    /*将出队消息加入到消息写入器的消息队列中*/
                    messageWriter.enqueue(outMessage);
                    /*从非空到空socket集合中移除当前socket*/
                    nonEmptyToEmptySockets.remove(socket);
                    /*将当前socket加入到空到非空socket集合中*/
                    emptyToNonEmptySockets.add(socket);    //not necessary if removed from nonEmptyToEmptySockets in prev. statement.
                } else{
                   /*如果当前socket对象的消息写入器中的消息队列不为空*/
                   messageWriter.enqueue(outMessage);
                }
            }
            /*继续从出站消息队列中出队消息*/
            outMessage = this.outboundMessageQueue.poll();
        }
    }

}
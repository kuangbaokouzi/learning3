javanio-server-master源码解读之MessageBuffer

public class MessageBuffer {
    /*定义KB为1024字节*/
    public static int KB = 1024;
    /*定义MB为1024KB*/
    public static int MB = 1024 * KB;
    /*定义小容量为4KB*/
    private static final int CAPACITY_SMALL  =   4  * KB;
    /*定义中容量为128KB*/
    private static final int CAPACITY_MEDIUM = 128  * KB;
    /*定义大容量为1024KB*/
    private static final int CAPACITY_LARGE  = 1024 * KB;

    //package scope (default) - so they can be accessed from unit tests.
    /*定义小容量缓冲区字节数组，大小4MB*/
    byte[]  smallMessageBuffer  = new byte[1024 *   4 * KB];   //1024 x   4KB messages =  4MB.
    /*定义小容量缓冲区字节数组*，大小16MB/
    byte[]  mediumMessageBuffer = new byte[128  * 128 * KB];   // 128 x 128KB messages = 16MB.
    /*定义小容量缓冲区字节数组*，大小16MB/
    byte[]  largeMessageBuffer  = new byte[16   *   1 * MB];   //  16 *   1MB messages = 16MB.

    /*小容量缓冲区空闲分区*/
    QueueIntFlip smallMessageBufferFreeBlocks  = new QueueIntFlip(1024); // 1024 free sections
    /*中小容量缓冲区空闲分区*/
    QueueIntFlip mediumMessageBufferFreeBlocks = new QueueIntFlip(128);  // 128  free sections
    /*大容量缓冲区空闲分区*/
    QueueIntFlip largeMessageBufferFreeBlocks  = new QueueIntFlip(16);   // 16   free sections

    //todo make all message buffer capacities and block sizes configurable
    //todo calculate free block queue sizes based on capacity and block size of buffers.
    /*初始化消息缓冲区*/
    public MessageBuffer() {
        //add all free sections to all free section queues.
        for(int i=0; i<smallMessageBuffer.length; i+= CAPACITY_SMALL){
            this.smallMessageBufferFreeBlocks.put(i);
        }
        for(int i=0; i<mediumMessageBuffer.length; i+= CAPACITY_MEDIUM){
            this.mediumMessageBufferFreeBlocks.put(i);
        }
        for(int i=0; i<largeMessageBuffer.length; i+= CAPACITY_LARGE){
            this.largeMessageBufferFreeBlocks.put(i);
        }
    }

    public Message getMessage() {
        /*获取下一个小容量块*/
        int nextFreeSmallBlock = this.smallMessageBufferFreeBlocks.take();
        /*如果读位置超过写位置，无可用消息，返回空*/
        if(nextFreeSmallBlock == -1) return null;
        /*利用当前消息缓冲区构造一个消息对象*/
        Message message = new Message(this);       //todo get from Message pool - caps memory usage.
        /*将小容量消息缓冲区作为共享数组*/
        message.sharedArray = this.smallMessageBuffer;
        /*小容量赋值*/
        message.capacity    = CAPACITY_SMALL;
        /*消息偏移量*/
        message.offset      = nextFreeSmallBlock;
        /*消息长度，一开始为0*/
        message.length      = 0;

        return message;
    }

    public boolean expandMessage(Message message){
        /*如果当前是小容量*/
        if(message.capacity == CAPACITY_SMALL){
            /*将消息从小容量缓冲区移动到中容量缓冲区*/
            return moveMessage(message, this.smallMessageBufferFreeBlocks, this.mediumMessageBufferFreeBlocks, this.mediumMessageBuffer, CAPACITY_MEDIUM);
        } else if(message.capacity == CAPACITY_MEDIUM){
            /*将消息从中容量缓冲区移动到大容量缓冲区*/
            return moveMessage(message, this.mediumMessageBufferFreeBlocks, this.largeMessageBufferFreeBlocks, this.largeMessageBuffer, CAPACITY_LARGE);
        } else {
            /*已经是最大容量缓冲区，不可移动*/
            return false;
        }
    }

    private boolean moveMessage(Message message, QueueIntFlip srcBlockQueue, QueueIntFlip destBlockQueue, byte[] dest, int newCapacity) {
        int nextFreeBlock = destBlockQueue.take();
        if(nextFreeBlock == -1) return false;

        System.arraycopy(message.sharedArray, message.offset, dest, nextFreeBlock, message.length);

        srcBlockQueue.put(message.offset); //free smaller block after copy

        message.sharedArray = dest;
        message.offset      = nextFreeBlock;
        message.capacity    = newCapacity;
        return true;
    }
}

Java NIO之Channel

Java NIO的通道类似流，但又有些不同：
既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。
通道可以异步地读写。
通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。
正如上面所说，从通道读取数据到缓冲区，从缓冲区写入数据到通道。

Channel的实现
这些是Java NIO中最重要的通道的实现：
FileChannel 从文件中读写数据。
DatagramChannel 能通过UDP读写网络中的数据。
SocketChannel 能通过TCP读写网络中的数据。
ServerSocketChannel可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。

基本的 Channel 示例
public class NioTest {
    public static void main(String[] args) throws Exception {
        RandomAccessFile randomAccessFile = new RandomAccessFile("/home/kouzikaile/workspace/learning3/Java IO/Java NIO之Channel", "rw");
        /*获得与文件唯一关联的通道对象*/
        FileChannel fileChannel = randomAccessFile.getChannel();
        /*分配一个新的字节缓冲区，新的缓冲区的position属性是0，limit属性是容量，mark未定义
          并且每个元素会被初始化为0。缓冲区有一个支撑数组，这个数组的偏移量是0。
          底层是通过创建堆字节缓冲区（HeapByteBuffer）对象完成的。
        */
        ByteBuffer buffer = ByteBuffer.allocate(48);

        int bytesRead;
        /*从当前通道中读取一个字节序列进入给定的字符缓冲区中。
          字节是从当前通道的文件位置开始读取的，然后文件位置会被更新为真正读取到的字节数。
        */
        while ((bytesRead = fileChannel.read(buffer)) != -1) {
            System.out.println("Read: " + bytesRead);
            /*翻转当前的缓冲区。limit属性被设置为当前位置并且position属性重新设置为0。如果mark属性被定义了，会被丢弃。
              在通道读取一个序列或者放置操作后，调用flip方法为通道写出一个序列或者相对的get操作。
            */
            buffer.flip();
            while (buffer.hasRemaining()) {
                /*相对的get方法。在缓冲区的当前位置读取字节，然后position属性的值+1*/
                System.out.println((char) buffer.get());
            }
            /*清空缓冲区。position属性设置成0，limit设置成容量，并且丢弃mark属性。
              在使用通道读取一个序列或者put操作之前调用这个方法来填充这个缓冲区。
              这个方法并非真正擦除缓冲区中的数据，但从名称上来看好像这样做了。*/
            buffer.clear();
        }
        randomAccessFile.close();
    }
}
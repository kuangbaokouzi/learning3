1.stream的collect方法用于收集数据

2.Collector接口作为collect方法的参数

3.Collector接口：收集器
①它是可变的汇聚操作，将输入元素累积到可变的结果容器中。它会在所有的元素处理完毕后，将累积的结果转换成一个最终表示（这是一个可选的操作）。支持串行与并行两种方式执行。
场景：将元素汇聚到集合中（Collection），将字符串汇聚到可变字符序列中（StringBuilder），求和，求平均，计数等等；

②Collectors类为我们提供了非常多的可变汇聚操作方法，Collectors本质上是一个工厂。

③Collector的方法：
Supplier<A> supplier();用来创建新的结果容器，接收一个参数，返回一个结果。

BiConsumer<A, T> accumulator();将新的数据元素合并到结果容器中，接收两个参数，不返回结果。主要应用于单线程场景。

BinaryOperator<A> combiner();将两个结果容器合并到一个结果容器中，接收两个参数，返回结果。与并行流联系紧密，主要用于多线程场景，对线程的执行结果进行折叠。

Function<A, R> finisher();将中间的累积类型转换为结果类型。

-Collector接口泛型解释
	T：用于汇聚操作的输入元素的类型
	A：汇聚操作的可变容器的类型
	R：汇聚操作的结果类型


Set<Characteristics> characteristics();

4.为了保证串行和并行执行结果等价，Collector函数必须满足两个条件：identity（同一性）和associativity（结合性）
a = combiner.apply(a, supplier.get());













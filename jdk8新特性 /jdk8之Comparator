Comparator

// 按照字母长度升序排序
Collections.sort(list, Comparator.comparingInt(String::length));

// 按照字母长度降序排序
Collections.sort(list, Comparator.comparingInt((String item) -> item.length()).reversed());

list.sort(Comparator.comparingInt(String::length).reversed());

// 按照字母长度降序排序并翻转元素，然后再根据不区分字母大小写升序排序
Collections.sort(list, Comparator.comparingInt(String::length).reversed()
                .thenComparing(String.CASE_INSENSITIVE_ORDER));

// 按照字母长度降序排序并翻转元素，然后再根据不区分字母大小写升序排序
Collections.sort(list, Comparator.comparingInt(String::length).reversed()
                .thenComparing(Comparator.comparing(String::toUpperCase)));

// 按照字母长度降序排序并翻转元素，然后再根据不区分字母大小写升序排序，最后再翻转顺序为降序
Collections.sort(list, Comparator.comparingInt(String::length).reversed()
                .thenComparing(Comparator.comparing(String::toUpperCase, Comparator.reverseOrder())));

// 按照字母长度降序排序并翻转元素，然后再根据不区分字母大小写升序排序，再翻转顺序为降序，最后再翻转顺序为升序
Collections.sort(list, Comparator.comparingInt(String::length).reversed()
                .thenComparing(Comparator.comparing(String::toUpperCase, Comparator.reverseOrder()))
                .thenComparing(Comparator.reverseOrder()));

自定义Collector

public class MySetCollector2<T> implements Collector<T, Set<T>, Map<T, T>> {
    @Override
    public Supplier<Set<T>> supplier() {
        System.out.println("supplier invoked!");
        return HashSet::new;
    }

    @Override
    public BiConsumer<Set<T>, T> accumulator() {
        System.out.println("accumulator invoked!");
//        return Set<T>::add;
        return (set, item) -> {
            set.add(item);
            System.out.println("accumulator " + Thread.currentThread().getName());
        };
    }

    @Override
    public BinaryOperator<Set<T>> combiner() {
        System.out.println("combiner invoked!");
        return (left, right) -> {
            left.addAll(right);
            return left;
        };
    }

    @Override
    public Function<Set<T>, Map<T, T>> finisher() {
        System.out.println("finisher invoked!");
        return set -> {
            Map<T, T> map = new HashMap<>();
            set.forEach(item -> map.put(item, item));
            return map;
        };
    }

    @Override
    public Set<Characteristics> characteristics() {
        System.out.println("characteristics invoked!");
        return Collections.unmodifiableSet(EnumSet.of(UNORDERED));
    }

    public static void main(String[] args) {
        List<String> list = Arrays.asList("hello", "world", "welcome", "hello");
        Map<String, String> map = list.parallelStream().collect(new MySetCollector2<>());
        System.out.println(map);
    }
}

execution result:
characteristics invoked!
supplier invoked!
accumulator invoked!
combiner invoked!
characteristics invoked!
accumulator main
accumulator ForkJoinPool.commonPool-worker-1
accumulator ForkJoinPool.commonPool-worker-1
accumulator ForkJoinPool.commonPool-worker-2
characteristics invoked!
finisher invoked!
{world=world, hello=hello, welcome=welcome}

并行流的累加器是在main、ForkJoinPool.commonPool-worker-1和ForkJoinPool.commonPool-worker-2这三个线程中完成操作的。

注意：如果没有设置了CONCURRENT，parallelStream并行流会创建多个线程，每个线程都对应一个结果容器，也就是说，最后需要调用combiner来组合这些结果容器的结果。如果设置了CONCURRENT，parallelStream并行流只会创建一个结果容器，然后会有多个线程共同操作这个结果容器，所以不可以在这种情况加一边修改集合一边遍历集合，会产生java.util.ConcurrentModificationException异常。








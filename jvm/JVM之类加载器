JVM之类加载器

在Java代码中，类型（类、接口等）的加载、连接与初始化过程都是在程序运行期间完成的

提供了更大的灵活性，增加了更多的可能性

Java虚拟机与程序的生命周期
在如下几种情况下，Java将结束生命周期
1.执行System.exit()方法
2.程序正常执行结束
3.程序在执行过程中遇到了异常或错误而终止
4.由于操作系统出现错误而导致Java虚拟机进程终止

类的加载、连接和初始化
加载：查找并加载二进制数据
连接
1.验证：确保被加载的类的正确性
2.准备：为类的静态变量分配内存，并将其初始化为默认值
3.解析：把类中的符号引用转换为直接引用
初始化：为类的静态变量赋予正确的初始值

Java程序对类的使用分为两种，主动使用和被动使用

所有的Java虚拟机实现必须在每个类或接口被Java程序首次主动使用时才初始化它们

主动使用：
1.创建类的实例
2.访问某个类或接口的静态变量，或者对静态变量赋值
3.调用类的静态方法
4.反射（通过类名得到Class对象）
5.初始化一个类的子类
6.Java虚拟机启动时被标明为启动类的类
7.JDK1.7开始提供动态语言支持：
java.lang.invoke.MethodHandle实例的解析结果REF_getStatic，REF_putStatic，REF_invokeStatic句柄对应的类没有初始化，则初始化

其它使用Java类的方式都是被动使用，并不会导致类的初始化

类的加载指的是将类.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在内存中创建一个java.lang.Class对象（规范并未说明Class对象在哪里，HotSpot虚拟机将其放到了方法区中）用来封装方法区内的数据结构

加载.class文件的方式：
1.从本地系统中直接加载
2.通过网络下载.class文件
3.从zip，jar等归档文件中加载.class文件
4.从专有数据库中提取.class文件
5.将Java源文件动态编译为.class文件（动态代理或jsp）
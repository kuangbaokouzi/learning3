传统的客户端-服务端通信：（对于并发不大的场景，采用一个线程一个socket方式）
1.服务器创建多个线程处理多个客户端的请求
2.线程数量过多，增加服务器的负担
3.线程上下文的切换开销较大
4.服务器可能存在大量空闲线程（连接但没有IO操作），浪费资源

++++++++++++++++++++++++++++++

Reactor响应器模式角色构成：一共由5中角色构成。
1.Handle（句柄Win或是描述符Linux）：本质上表示一种资源，是由操作系统提供的；该资源用于表示一个个的事件，比如文件描述符、针对网络编程中的socket描述符。事件既可以来自于外部，也可以来自于内部；外部事件比如客户端的连接请求、客户端发送消息等；内部事件比如操作系统产生的定时器时间的等。它本质上就是一个文件描述符。Hadnle是事件产生的源头。

2.Synchronous Event Demultiplexer（同步事件分离器）：本质上是一个系统调用，用于等待事件的发生（事件可能是一个，也可能是多个）。调用方在调用它的时候会被阻塞，一直阻塞到同步事件分离器上由事件产生为止。对于Linux来说，同步时间分离器指的是常用的I/O多路复用的机制，比如select、poll、epoll等。
映射到java.nio，同步事件分离器对应的组件就是选择器Selector，对应的阻塞方法就是select方法。

3.Event Handler（事件处理器）：由多个回调方法构成，这些回调方法构成了与应用相关的对于某个事件的反馈机制。java.nio没有设计这种事件回调机制。而在netty框架中，不仅提供了很多内置的Handler，还可以由用户指定自定义的Handler。比如，SimpleChannelInboundHandler提供了通道注册、激活、添加等回调方法。netty对于java.nio而言，在事件处理器这个角色上进行了一个升级，它为开发者提供了大量的回调方法，供开发者在特定时间产生时实现相应的回调方法来进行业务逻辑处理。

4.Concrete Event Handler（具体事件处理器）：事件处理器的实现。它实现了事件处理器所提供的各个回调方法，从而实现了特定业务的逻辑。它由开发者编写。在netty中，通常会编写一个Handler继承SimpleChannelInboundHandler，并重写父类的各个回调方法来实现特定的业务逻辑。

5.Initation Dispatcher（初始分发器）：本质上就是Reactor角色。它定义了一些规范，这些规范用于控制事件的调度方式，同时又提供了应用进行事件处理的注册、移除等设施。它是整个事件处理器的核心，初始分发器会通过同步时间分离器的发生。一旦事件发生，初始分发器首先会分离出每一个事件，然后调用事件处理器，调用相关回调方法来处理这些事件。初始分发器就相当于subreactor（负责分发处理器的线程池）。初始化阶段，将需要的Event Handler都注册到初始分发器中，当事件产生（Handle感知），由初始分发器调用Selector的select方法获得这些事件，然后分离出每一个事件（这些事件可以是完成socket连接、通道可读、通道可写、通道可连接等），调用事件对应的事件处理器并产生系相应的回调行为。

++++++++++++++++++++++++++++++

Reactor模式的流程

1.当应用向Initiation Dispatcher注册具体的事件处理器时，应用会标识出该事件处理器希望Initiation Dispatcher在某个事件发生时向其通知的该事件，该事件与Handle关联。
2.Initiation Dispatcher会要求每个事件处理器向其传递内部的Handle。该Handle对象向操作系统标识了事件处理器。
3.当所有的事件处理器注册完毕后，应用会调用handle_events方法来启动Initation Dispatcher的事件循环。这时，Initation Dispatcher会将每个注册的事件管理器的Handle合并起来，并使用同步事件分离器等待这些事件的发生。比如说，TCP协议层会使用select同步事件分离器操作来等待客户端发送的数据到达连接的scoket handle上。
4.当与某个事件源对应的handle变为ready状态时（比如说，TCP socket变为等待读状态），同步事件分离器就会通知Initation Dispatcher。
5.Initation Dispatcher会触发事件处理器的回调方法，响应这个处于ready状态的Handle。当事件发生时，Initation Dispatcher会将被事件源激活的Handle作为【key】来寻找并分发恰当的处理器回调方法。
6.Initation Dispatcher会回调事件处理器的handle_events回调方法来执行特定于应用的功能（开发者自己所编写的功能），从而响应这个事件，所发生的事件类型可以作为该方法参数并被方法内部使用来执行额外的特定于服务的分离与分发。






















































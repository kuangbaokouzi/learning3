Reactor反应器

1.研究目的和意义
  反应器设计模式处理同时被一个或多个客户端想向应用发起的服务请求。应用中的每个服务由若干方法组成，并被独立的事件处理器呈现。事物处理器的职责在于转发服务请求。初始分发器管理注册事件处理器，并执行事件处理器的转发。多路服务请求被一个同步的多路事件选择器执行。

2.也被称为转发器或通知器

3.案例
  为了说明反应器模式，考虑为一个分布式日志服务采用事件驱动服务器。客户端应用使用日志服务记录它们在分布式环境中的状态信息。这些状态信息包括，错误通知、debug跟踪以及执行报告。日志记录被发送到中心日志服务器，中心日志服务器再讲记录写到各种输出设备，比如：控制台、打印机、文件或者网络管理数据库。
  日志服务器处理日志记录和客户端发送的连接请求。日志记录和连接请求可以同时到达多个句柄。一个句柄定义了被操作系统管理的网络资源。
  日志服务器使用面向连接的协议，比如TCP协议，连接客户端。客户端想要记录日志数据，必须首先想日志服务器发送连接请求。服务器使用句柄工厂等待这些请求。工厂监听了一个被客户端理解的地址。当一个连接请求达到，句柄工厂建立一个客户端和服务器的连接，通过创建一个代表终端的新句柄。这个句柄被返回给服务器，然后服务器等待客户端服务请求到这个句柄。一旦客户端被连接，它们可以同时向服务器发送日志数据。服务器通过连接的socket句柄接收这些记录。
  也许，开发一个并发日志服务器最直观的方法是使用多线程，多线程可以同时处理多个客户端。这种同步的方式接收网络连接并生成一个线程对应一个连接，操作每一个客户端日志记录。
  然而，在一些场合，使用多线程实现日志记录处理会失败，如下：
·高效性：线程会导致执行困难，因为线程上下文切换、同步、和数据移动带来的开销。
·轻便性：在一些操作系统中，不支持线程编程。
·易于编程：线程要求复杂的并发控制设计。
因此，开发一个并发日志服务器，多线程并不是最有效和最简单的解决方案。

4.上下文
  在一个分布式系统中的服务器应用接收一个或多个客户端的事件。

5.问题
  分布式系统中的服务器应用必须操作多个发送服务请求的客户端。在调用一个指定的服务之前，服务器应用必须为每一个进入的请求多路转发它们对应的服务提供器。为多路转发客户端的请求开发一个有效的服务机制需要考虑到以下改革：
·可获得性：操作请求的服务必须可获得，哪怕服务器正在等待其它请求抵达。尤其是，一个服务操作任何一个位于其它事件源中独立的事件源必须是非阻塞的，当服务为其它客户端有意义地延迟响应。
·高效性：服务必须将潜在因素降低到最小，将吞吐量提升到最大并且避免不必要的CPU调用。
·易于编程：服务设计应该简化并发策略的使用。
·适配性：集成新的或改良服务，比如修改信息格式或者增加服务器侧缓存，应该对既存代码进行最小的修改和维护耗费。比如，实现一个新的应用服务，不应该要求修改多路类的事件和转发机制。
·轻便性：进入新的操作系统服务端口，不应该要求大量工作。

6.解决方案
  集成同步事件分离器和转发对应事件处理器。另外，分离应用指定的转发和服务实现，通过普遍事件多路转发机制。
  对于应用提供的每个服务，引入一个独立的事件处理器来执行确定的事件类型。所有的事件处理器实现相同的接口。事件处理器注册到一个初始分发器中，转发器使用同步事件分离器等待事件的触发。当事件触发，同步事件分离器通知初始分发器，给指定事件同步回调事件处理器。事件处理器转发事件到实现了请求服务的方法中。

7.结构
  反应器关键的参与者包括：
·句柄
  定义被操作系统管理的资源。这些资源包括网络连接，打开文件，定时器，同步对象等。句柄被用在日志服务器中定义socket终端，这样同步事件分离器可以等待事件事件的发生。日志服务器关心两种类型，连接事件和读事件，这两种类型代表了输入客户端连接和日志记录动作。日志服务器为每一个客户端创建一个独立的连接。在服务器中每个连接被一个socket句柄表示。

·同步事件分离器
  阻塞的等待事件发生在句柄集合上。当它在一个非阻塞的句柄上初始化了一个操作，它会返回。一个常见的分离器IO事件是select，它是一个多路选择系统调用，由UNIX和Win32操作系统提供。这个select调用意味着句柄拥有操作，这些操作被同步非阻塞应用处理调用。

·初始分发器
  定义一个接口来注册，移除和转发事件句柄。最终，同步事件分离器负责等待直到新的事件触发。当它发觉新的事件，它会通知初始分发器回调应用指定的事件处理器。一般事件包括连接接收事件，数据输入和数据输出，以及超时事件。

·事件处理器
  指定一个接口，由一个钩子方法组成。钩子是为指定服务事件转发操作的抽象表示。这个方法必须被指定的应用服务实现。

·具体的事件处理器
  实现钩子方法，同时这些方法在应用指定的方式中执行事件。随着初始分发器处理确定的事件类型，应用注册具体事件处理器。当这些事件到达，初始分发器回调对应的事件处理器的钩子方法。
  在日志服务器中有两个具体事件处理器：日志处理器和日志接收器。日志处理器负责接收并处理日志记录。日志接收器创建一个具体的日志处理器，处理来自客户端的随后的日志记录。

8.动态
8.1 一般协作
在反应器模式中，发生下列协作：
  当一个应用随初始分发器注册一个具体的事件处理器，这个应用表明了事件的类型。这个事件处理器想要初始分发器通知它关于何时事件发生在关联的句柄上。
  初始分发器请求每一个事件处理器来回传它的内部的句柄。这个句柄标识操作系统上的事件处理器。
  在所有的事件处理器被注册后，应用调用句柄事件来开启初始分发器的事件循环。此时，初始分发器由每一个注册的事件处理器的句柄组成。初始分发器使用同步事件分离器等待这些句柄上的事件发生。换言之，TCP协议层使用select同步事件多路选择动作来等待在相关的socket句柄上日志记录事件的到达。
  同步事件分离器通知初始分发器何时一个句柄对应的一个事件源变成“准备”状态。例如，一个TCP socket准备好读操作。
  在给准备好的句柄上的事件响应过程中，初始分发器触发事件处理器的钩子方法。当事件发生，初始分发器使用活动状态的句柄，这些句柄被事件源作为“键”来定位和转发合适的事件处理器的钩子方法。
  初始分发器回调事件处理器的句柄事件钩子方法，执行事件响应中的指定应用功能。发生事件的类型可以作为一个参数传递给钩子方法，也可以在钩子方法内部使用来执行额外的指定服务多路选择动作和转发动作。







































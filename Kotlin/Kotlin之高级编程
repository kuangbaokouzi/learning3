Kotlin高级编程

数据类（data class）

data class Person(val name:String, var age: Int, var address: String)

fun main(args: Array<String>) {
    var person = Person("Kate",20,"LOS")
    println(person)
}
数据类（类似entity/domain/mmodel）
1.primary构造器至少由一个参数
2.primary构造器的参数必须用val或者var定义
3.数据类不可以是abstract、open、sealed或inner的

fun main(args: Array<String>) {
    var person = Person("Kate",20,"LOS")
    println(person)
    var person2 = person.copy(address = "Flor")
    println(person2)
}
对于数据类，编译器会自动生成如下内容：
1.equals/hashcode
2.toString
3.针对属性的componentN方法，并且是按照属性的声明顺序生成的

数据类成员的继承：
1.如果数据类中显式定义了equals、hashcode或toString方法，或是在数据类的父类中将这些方法声明为了final，那么这些方法就不会再生成，转而使用已有的
2.如果父类拥有componentN方法，并且是open的以及返回兼容的类型，那么编译器就会在数据类中生成相应的componentN方法，并重写父类的方法，如果父类中的这些方法由于不兼容的签名或被定义为final，编译器会报错
3.在数据类中显式提供componentN方法以及copy方法是不被允许的

fun main(args: Array<String>) {
    var person = Person("Kate",20,"LOS")
    println(person)
    var person2 = person.copy(address = "Flor")
    println(person2)
    var (name, age, address) = person // 解构语法，按顺序解析
    println("$name, $age, $address")
}
解构声明
在primary构造器中有多少个参数，就会依次生成多少个对应的component1， component2， component3...，这些方法返回的就是对应字段的值，而componentN方法是用来实现解构声明的。

data class Person2(val name: String = "", var age: Int = 0, val address: String = "")
在jvm平台上，如果生成的类需要无参构造方法，就需要为所有属性执行默认值。

密封类（sealed class）

sealed class Calculator

class Add : Calculator()

class Sub : Calculator()

class Multiply : Calculator()

fun calculate(a: Int, b: Int, calculator: Calculator) = when (calculator) {
    is Add -> a + b
    is Sub -> a - b
    is Multiply -> a * b
}

fun main(args: Array<String>) {
    println(calculate(1, 2, Add()))
    println(calculate(1, 2, Sub()))
    println(calculate(1, 2, Multiply()))
}
密封类描述的是类之间的层次关系，父类与其直接子类必须定义在同一个文件中。

泛型（generics），表示变量类型参数化

class MyGeneric<T>(var t: T)

fun main(args: Array<String>) {
    var myGeneric = MyGeneric("hello world")
    println(myGeneric.t)
}
借助于Kotlin的类型推断，并不需要显式指定泛型。

泛型之协变（convariant）和逆变（controvariant）

void addAll(Collection<E> items);

void copyAll(Collection<Object> to, Collection<String> from){
    to.addAll(from);
}
在此，to.addAll(from)不成功；将addAll方法进行修改：
void addAll(Collection<? extends E> items); to.addAll(from)成功。
Collection<String>是Collection<? extends Object>的类型，这称之为协变；List<? super String>则称之为逆变。

生产者使用? extends E，消费者使用? super E

class MyClass<out T, in M>(t: T, m: M) {
    private var t: T
    private var m: M

    init {
        this.t = t
        this.m = m
    }

    fun get(): T = this.t
    fun set(m: M) {
        this.m = m
    }
}

fun myTest(myClass: MyClass<String, Number>) {
    var myObject: MyClass<Any, Int> = myClass
    println(myObject.get())
}

fun main(args: Array<String>) {
    myTest(MyClass("welcome", 20))
}
out关键字描述的是协变，in关键字描述的是逆变。

interface Producer<out T> {
    fun produce(): T
}

interface Consumer<in T> {
    fun consume(t: T)
}

interface ProducerConsumer<T> {
    fun produce(): T
    fun consume(t: T)
}

open class Fruit

open class Apple : Fruit()

class ApplePear : Apple()

class FruitProducer : Producer<Fruit> {
    override fun produce(): Fruit {
        println("produce fruit")
        return Fruit()
    }
}

class AppleProducer : Producer<Apple> {
    override fun produce(): Apple {
        println("produce apple")
        return Apple()
    }
}

class ApplePearProducer : Producer<ApplePear> {
    override fun produce(): ApplePear {
        println("produce apple pear")
        return ApplePear()
    }
}

class Human : Consumer<Fruit> {
    override fun consume(t: Fruit) {
        println("consume fruit")
    }
}

class Man : Consumer<Apple> {
    override fun consume(t: Apple) {
        println("consume apple")
    }
}

class Boy : Consumer<ApplePear> {
    override fun consume(t: ApplePear) {
        println("consume apple pear")
    }
}

fun main(args: Array<String>) {
    /*对于"out"泛型来说，可以将子类型的对象赋值给父类型的引用*/
    val producer1: Producer<Fruit> = FruitProducer()
    val producer2: Producer<Fruit> = AppleProducer()
    val producer3: Producer<Fruit> = ApplePearProducer()

    /*对于"in"泛型来说，可以将父类型的对象赋值给子类型的引用*/
    val consumer1: Consumer<ApplePear> = Human()
    val consumer2: Consumer<ApplePear> = Man()
    val consumer3: Consumer<ApplePear> = Boy()
}
如果只将泛型类型作为输出类型，就可以声明成out；如果只将泛型类型作为输入类型，就可以声明成int。如果同时将泛型类型作为输入类型和输出类型，就不可以使用in/out关键字修饰，属于不变类型。

类型投影（type projection，使用处协变use-side variance）
fun copy(from: Array<out Any>, to: Array<Any>) {
    assertTrue(from.size == to.size)

    for (i in from.indices) {
        to[i] = from[i] // from只能调用get方法，使用处协变
    }
}

fun setValue(to: Array<in String>, index: Int, value: String) {
    to[index] = value // to只能调用set方法，使用处逆变
}

fun main(args: Array<String>) {
    val from: Array<Int> = arrayOf(1, 2, 3, 4)
    val to: Array<Any> = Array(4, { "hello" + it })
    copy(from, to)

    for (it in to) {
        println(it)
    }

    val array: Array<Any> = Array(4, { _ -> "hello" })

    setValue(array, 2, "welcome")

    for (it in array) {
        println(it)
    }
}

星投影（star projection）

Star<out T>：如果T的上界是TUpper，那么Star<*>就相当于Star<out T>，这表示当T的类型未知时，从Star<*>可以安全读取TUpper类型的值
Star<in T>：Star<*>就相当于Star<in Nothing>，这表示无法向其中写入任何值
Star<T>：如果T的上界是TUpper，那么Star<*>就相当于读取时的Star<out TUpper>以及写入时的Star<in Nothing>

class Star<out T>

class Star2<in T> {
    fun setValue(t: T) {

    }
}

class Star3<T>(private var t: T) {
    fun setValue(t: T) {

    }

    fun getValue(): T = this.t
}

fun main(args: Array<String>) {
    val star: Star<Number> = Star<Int>()
    val star2: Star<*> = star

    val star3: Star2<Int> = Star2<Number>()
    val star4: Star2<*> = star3
//    star4.setValue(1)

    val star5: Star3<String> = Star3("hello")
    val star6: Star3<*> = star5

    println(star6.getValue())
//    star6.setValue("world")

    val list: MutableList<*> = mutableListOf("hello", "world", "welcome")
    println(list[0])
//    list[0] = "bye"
}

泛型擦除，当使用@UnsafeVariance注解的时候，不会将真正将泛型进行类型转换
class MyStorage<out T>(private var t: T){
    fun getValue():T = this.t

    fun setValue(t: @UnsafeVariance T){// 泛型擦除
        this.t = t
    }
}

fun main(args: Array<String>) {
    var myStorage: MyStorage<Int> = MyStorage(5)
    val myStorage2: MyStorage<Any> = myStorage

    println(myStorage2.getValue())
    myStorage2.setValue("hello")// 泛型擦除
    println(myStorage2.getValue())
}

泛型函数
fun <T> getValue(item: T): T {
    return item
}

泛型上界
class UpperBoundsClass2<T> where T : Comparable<T>, T : Any

fun main(args: Array<String>) {
    val item = getValue(3)
    val item2 = getValue("hello")
    println("$item, $item2")

    val upperBoundsClass = UpperBoundsClass2<String>()
}

嵌套类（Nested class）
class OuterClass {
    private val string: String = "hello world"

    class NestedClass {
        fun nestedMethod() = "method"
    }
}

fun main(args: Array<String>) {
    println(OuterClass.NestedClass().nestedMethod())
}

内部类（Inner class）
class OuterClass2 {
    private val string: String = "welcome"

    inner class InnerClass {
        fun innerMethod() = this@OuterClass2.string + " hello world"
    }
}

fun main(args: Array<String>) {
    println(OuterClass2().InnerClass().innerMethod())
}

嵌套类与内部类的区别:
1.嵌套类对应java中的静态内部类，只要在一个类中定义另外一个类，被定义的类就叫做嵌套类；
2.内部类对应java中的非静态内部类，在一个类中定义另外一个类并使用inner关键字修饰了这个被定义的类，这个类就叫做内部类
class Person(val name: String, var age: Int) {
    private inner class PersonFuture(var height: Int, var weight: Int) {
        fun getPersonFuture() {
            println("height: $height, weight: $weight")
            this@Person.method()
        }
    }

    private fun method() {
        println("Person.method invoked!")
    }

    fun getPerson(){
        val personFuture = PersonFuture(120,80)
        personFuture.getPersonFuture()
    }
}

fun main(args: Array<String>) {
    val person = Person("Kate", 20)
    person.getPerson()
}

对象表达式（Object expression）
为解决匿名内部类的缺陷而产生的
interface MyInterface {
    fun myPrint(a: Int)
}

abstract class MyAbstractClass {
    abstract val age: Int
    abstract fun printMyAbstractClassInfo()
}

fun main(args: Array<String>) {
    var myObject = object : MyInterface {
        override fun myPrint(a: Int) {
            println("a = $a")
        }
    }
    myObject.myPrint(8)

    var myObject2 = object : MyAbstractClass() {
        override val age: Int
            get() = 20

        override fun printMyAbstractClassInfo() {
            println("age = $age")
        }
    }
    myObject2.printMyAbstractClassInfo()

    var myObject3 = object {
        init{
            println("init myObject3")
        }

        var myProperty = "hello world"

        fun myMethod() = {
            println("myMethod invoked!$myProperty")
        }
    }
    myObject3.myMethod()

    var myObject4 = object : MyInterface, MyAbstractClass(){
        override fun myPrint(a: Int) {
            println("a = $a")
        }

        override val age: Int
            get() = 100

        override fun printMyAbstractClassInfo() {
            println("age = $age")
        }
    }
    myObject4.myPrint(99)
    myObject4.printMyAbstractClassInfo()
}

对象表达式的注意事项：
1.匿名对象只能在局部变量范围内或是被private修饰的成员变量范围内才能被识别出真正的类型
2.如果将匿名对象当做一个public方法的返回类型或是public属性的类型，那的么该方法或是属性真正类型就是该匿名对象所声明的父类型
3.如果没有声明任何父类型，那么其类型就是Any；在这种情况下，匿名对象中所声明的任何成员都是无法访问的。
class MyClass{
    private var myObject = object {
        fun output(){
            println("output invoked")
        }
    }

    fun myTest(){
        println(myObject.javaClass)
        myObject.output()
    }
}

fun main(args: Array<String>) {
    MyClass().myTest()
}

class MyClass2{
    private fun method() = object{
        val str = "hello"
    }

    internal fun method2() = object {
        val str = "world"
    }

    fun test(){
        val str = method().str
        // val str2 = method2().str 这里是无法引用到对象表达式中的str，就是应为method2倍internal修饰
    }
}

Kotlin对象表达式中的代码是可以访问到外层的变量，而且，外层变量无须声明成final，也就是说，在对象表达式中是可以修改外层变量的。
fun main(args: Array<String>) {
    var i = 100

    var myObject = object {
        fun method(){
            i++
        }
    }

    myObject.method()
    println(i)
}

如果对象是Java函数式接口的一个实例（即只包含一个抽象方法的接口的实例），那么可以通过Lambda表达式来调用，其中Lambda表达式前面加上接口类型。
fun main(args: Array<String>) {
    val jFrame = JFrame("My JFrame")
    val jButton = JButton("My JButton")

    jFrame.addWindowListener(object : WindowListener {
        override fun windowDeiconified(e: WindowEvent?) {
        }

        override fun windowClosing(e: WindowEvent?) {
            println("windowClosing")
        }

        override fun windowClosed(e: WindowEvent?) {
        }

        override fun windowActivated(e: WindowEvent?) {
            println("windowActivated")
        }

        override fun windowDeactivated(e: WindowEvent?) {
        }

        override fun windowOpened(e: WindowEvent?) {
            println("windowOpened")
        }

        override fun windowIconified(e: WindowEvent?) {
        }
    })

    /*Lambda表达式前面的接口类型是可以通过类型推导，可以省略*/
    //  jButton.addActionListener(ActionListener { println("actionPerformed") })
    jButton.addActionListener({ println("actionPerformed") })

    jFrame.add(jButton)
    jFrame.pack()
    jFrame.isVisible = true
    jFrame.defaultCloseOperation = JFrame.EXIT_ON_CLOSE
}

Kotlin中的枚举类型
enum class Season {
    SPRING, SUMMER, AUTUMN, WINTER
}

enum class Season2(val tempreature: Int) {
    SPRING(10), SUMMER(30), AUTUMN(20), WINTER(-10)
}

enum class Season3 {

    SPRING {
        override fun getSeason(): Season3 = SPRING
    },

    SUMMER {
        override fun getSeason(): Season3 = SUMMER
    },

    AUTUMN {
        override fun getSeason(): Season3 = AUTUMN
    },

    WINTER {
        override fun getSeason(): Season3 = WINTER
    };

    abstract fun getSeason(): Season3
}

fun main(args: Array<String>) {
    val seasons = Season3.values()
    seasons.forEach { println(it)}

    val season = Season.valueOf("SPRING")
    println(season)
}

对象声明
object MyObject{
    fun method() = "hello world"
}

object MyObject2: ActionListener{
    override fun actionPerformed(e: ActionEvent?) {
        println("actionPerformed")
    }
}

fun main(args: Array<String>) {
    println(MyObject.method())
}

对象表达式和对象声明的区别：
1.对象表达式是立即初始化或执行的
2.对象声明式延迟初始化，在首次访问的时候执行
3.伴生对象是在其对应的类被加载时初始化、

委托（delegation）
委托原理：
by关键字后面的对象实际上被存储在类的内部，编译器则会将父接口中的所有方法实现出来，并且将实现转移给委托对象来执行

1.类委托
interface MyInterface {
    fun myPrint()
}

class MyInterfaceImpl(val string: String) : MyInterface {
    override fun myPrint() {
        println("welcome, $string")
    }
}

class MyClass(myInterface: MyInterface) : MyInterface by myInterface{
    override fun myPrint() {
        println("hello world")
    }
}

fun main(args: Array<String>) {
    MyClass(MyInterfaceImpl("Kate")).myPrint()
}

2.委托属性（delegated property）
有4中情况在实际开发中比较有用：延迟属性、可观测属性、非空属性、map属性
class MyDelegate {
    operator fun getValue(thisRef: Any?, property: KProperty<*>): String = "$thisRef, your delegated property name is ${property.name}"
    operator fun setValue(thisRef: Any?,property: KProperty<*>, value:String) = println("$thisRef, new value is $value")
}

class MyPropertyClass {
    var string: String by  MyDelegate()
}

fun main(args: Array<String>) {
    val myPropertyClass = MyPropertyClass()
    myPropertyClass.string = "hello world"
    println(myPropertyClass.string)
}

延迟属性：指的是属性只在第一次被访问的时候才会计算，之后则会将之前缓存起来的计算结果直接返回
lazy函数的参数：
1.SYNCHRONIZED：默认情况下，延迟属性的计算是同步的；值只会在一个线程中得到计算，所有线程都会使用相同的结果
2.PUBLICATION：不需要初始化委托的同步，这样多个线程可以同时执行
3.NON：确定初始化只会发生在单线程场景，这样会减少线程安全方面的开销

val myLazyValue: Int by lazy(LazyThreadSafetyMode.NONE) {
    println("hello world")
    30
}

fun main(args: Array<String>) {
    println(myLazyValue)
    println(myLazyValue)
}
hello world
30
30

可观测属性：
接收两个参数：初始值和修改处理器。处理器会在我们每次对属性赋值后调用
处理器接收三个参数：被赋值的属性本身，旧的属性值和新的属性值
class Person {
    var age: Int by Delegates.observable(20) { property, oldValue, newValue -> println("${property.name}, oldValue: $oldValue, newValue: $newValue") }
}

fun main(args: Array<String>) {
    val person = Person()
    person.age = 30
    person.age = 40
}

可否决属性：
接收两个参数：初始值和修改处理器。处理器会在我们每次对属性赋值前调用
处理器接收三个参数：被赋值的属性本身，旧的属性值和新的属性值，处理器返回true，属性修改；处理器返回false，属性不修改

class Person2 {
    var age: Int by Delegates.vetoable(20) { property, oldValue, newValue ->
        when {
            oldValue <= newValue -> true // 只有当新的值比旧的值大的时候才可以修改属性
            else -> false
        }
    }
}

val person2 = Person2()
    println(person2.age)
    person2.age = 40
    println(person2.age)
    person2.age = 30
    println(person2.age)

非空属性：
class MyPerson {
    var address: String by Delegates.notNull()
}

fun main(args: Array<String>) {
    val myPerson = MyPerson()
    myPerson.address = "Shanghai"
    /*在使用之前必须进行初始化*/
    println(myPerson.address)
}

map属性：
一种常见得应用场景是将属性值存储在map中。这通常出现在JSON解析或一些动态行为中（支付宝支付完成后的异步通知）。在这种情况中，可以将map实例作为类中属性的委托。map中的key的名字要与类中的属性名字保持一致
class Student(map: Map<String, Any?>) {
    val name: String by map
    val address: String by map
    val age: Int by map
    val birthday: Date by map
}

class Student2(map: MutableMap<String, Any?>) {
    var address: String by map
}

fun main(args: Array<String>) {
    /*处理制度属性的map委托*/
    val student = Student(mapOf(
            "name" to "Kate",
            "address" to "NewYork",
            "age" to 20,
            "birthday" to Date()
    ))

    println(student.name)
    println(student.address)
    println(student.age)
    println(student.birthday)

    /*处理读写属性的map委托*/
    val map: MutableMap<String, Any?> = mutableMapOf(
            "address" to "Shanghai"
    )

    val student2 = Student2(map)
    println(map["address"])
    println(student2.address)
    student2.address = "Beijing"
    println(map["address"])
    println(student2.address)
}

关于属性委托的要求：
对于只读属性来说（val修饰的属性），委托需要提供一个名为getValue的方法，该方法接收如下参数：
- thisRef，需要是属性拥有者相同的类型或是其父类型（对于扩展属性来说，这个类型指的是被扩展的那个类型）
-property，需要是KProperty<*>类型或是其父类型
-getValue方法需要返回与属性相同的类型或是其子类型

对于可变属性来说（var修饰的属性），委托需要再提供一个名为setValue的方法，该方法接收如下参数：
-thisRef，与getValue方法的thisRef要求一致
-property，与getValue方法的property要求一致
-newValue，需要与属性的类型相同或是其父类型

getValue与setValue方法既可以作为委托类的成员方法实现，也可以作为其扩展方法来实现

这两个方法都必须要标记为operator关键字。对于委托来说，它可以实现ReadOnlyProperty或者是ReadWriteProperty接口，这些接口包含了相应的getValue与setValue方法；同时，对于委托类来说，也可以不去实现这两个接口，而是自己单独实现getValue和setValue方法。

委托转换规则：
对于每个委托属性来说，Kotlin编译器在底层会生成一个辅助的属性，将对原有属性访问委托给这个辅助属性。
比如，对于属性prop来说，Kotlin编译器所生成的属性名为prop$delegate，然后对原有的prop属性的访问器的访问都只是委托给了这个额外的、Kotlin编译所产生的辅助属性。

提供委托（providing a delegate）
通过定义provideDelegate operator，可以扩展委托的创建逻辑过程。如果对象定义了provideDelegate方法，那么该方法就会被调用来创建属性委托实例。
class PropertyDelegate : ReadOnlyProperty<People, String> {
    override fun getValue(thisRef: People, property: KProperty<*>): String = "hello world"
}

class PeopleLauncher {
    operator fun provideDelegate(thisRef: People, property: KProperty<*>): ReadOnlyProperty<People, String> {
        println("provideDelegate")
        when (property.name) {
            "name", "address" -> return PropertyDelegate()
            else -> throw Exception("not valid name")
        }
    }
}

class People {
    val name: String by PeopleLauncher()
    val address: String by PeopleLauncher()
}

fun main(args: Array<String>) {
    val people = People()
    println(people.name)
    println(people.address)
}